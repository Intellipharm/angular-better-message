!function(){"use strict";angular.module("AngularBetterMessage",[])}(),angular.module("AngularBetterMessage",[]).run(["$templateCache",function(e){e.put("html/angular-better-message.html",'<div class="angular-better-message" ng-class="[state, outer_prompt_class]" ng-show="is_visible"><div ng-class="message_class"><span ng-class="message_icon_class"></span> <span class="angular-better-message-wrapper"></span> <span class="countdown" ng-if="show_count_down">{{count_down}}</span></div><div ng-if="prompt" ng-class="prompt_class"><button ng-class="prompt_button_class" ng-click="ctrl.onClick()">{{prompt}} <span ng-class="prompt_icon_class"></span></button></div></div>')}]),function(){"use strict";var e=function(e){this.onClick=function(){if(!_.isUndefined(e.onClick)){var s=_.isUndefined(e.message)?null:e.message,t=_.isUndefined(e.state)?null:e.state,a=_.isUndefined(e.key)?null:e.key,n=_.isUndefined(e.data)?null:e.data;e.onClick({message:s,state:t,key:a,data:n})}e.close()}};e.$inject=["$scope"],angular.module("AngularBetterMessage").controller("AngularBetterMessageCtrl",e)}(),function(){"use strict";var e=function(e,s,t,a,n,o){return{restrict:"EA",scope:{api:"=",message:"=",state:"=",key:"=",data:"=",message_icon_class:"=messageIconClass",prompt:"=",prompt_button_class:"=promptButtonClass",prompt_icon_class:"=promptIconClass",display_seconds:"=displaySeconds",show_count_down:"=showCountDown",fixed_position_on_scroll:"=fixedPositionOnScroll",always_detached:"=alwaysDetached",onClick:"&onPromptClick"},controller:"AngularBetterMessageCtrl as ctrl",link:function(s,c,l,i){var d=s.api||{};s.message_class=a,s.prompt_class=n;var r,u,p;s.is_visible=!1;var g,m=angular.element(e);d.close=function(){s.close()},d.update=function(){s.update()},s.close=function(){s.is_visible=!1},s.wait=function(){r=window.setTimeout(function(){0===--s.count_down?(window.clearTimeout(r),s.close(),s.$apply()):(s.wait(),s.$apply())},1e3)},s.checkPosition=function(){s.is_visible&&!c.hasClass("detached")&&_.isNull(c[0].offsetParent)?u=window.setTimeout(function(){s.checkPosition(),s.$apply()},100):(p=c[0].getBoundingClientRect().top,s.updateDetached())},s.updateDetached=function(){window.clearTimeout(u),s.always_detached||!c.hasClass("detached")&&0>=p&&e.pageYOffset>0?(s.updateDetachedClass(!0),g=e.pageYOffset):c.hasClass("detached")&&!_.isUndefined(g)&&e.pageYOffset<=g&&s.updateDetachedClass(!1)},s.updateDetachedClass=function(e){console.log(e),e?c.hasClass("detached")||c.addClass("detached"):c.hasClass("detached")&&c.removeClass("detached")},s.update=function(){s.is_visible=!0,s.fixed_position_on_scroll&&s.checkPosition(),s.count_down=_.parseInt(s.display_seconds),window.clearTimeout(r),_.isUndefined(s.count_down)||0===s.count_down||(s.wait(),s.outer_prompt_class=o)},s.$watch("display_seconds",function(e){_.isUndefined(e)||""===e||(s.display_seconds=_.parseInt(e),s.count_down=_.parseInt(e))}),s.$watch("message",function(e){var a=angular.element(c[0].querySelector(".angular-better-message-wrapper"));if(a.empty(),_.isUndefined(e)||""===e)window.clearTimeout(r),s.close();else{var n=t("<span>"+e+"</span>")(s.$parent.$parent);a.append(n),s.update()}}),s.$watch("prompt",function(e){_.isUndefined(e)||""===e?s.outer_prompt_class="":s.outer_prompt_class=o}),s.$watch("always_detached",function(){s.updateDetachedClass(s.always_detached)}),s.fixed_position_on_scroll&&m.on("scroll",function(){_.isUndefined(s.message)||""===s.message||s.checkPosition()})},replace:!0,templateUrl:"html/angular-better-message.html"}};e.$inject=["$window","$timeout","$compile","ANGULAR_BETTER_MESSAGE_CLASS","ANGULAR_BETTER_MESSAGE_PROMPT_CLASS","ANGULAR_BETTER_MESSAGE_HAS_PROMPT_CLASS"],angular.module("AngularBetterMessage").directive("angularBetterMessage",e)}(),function(){"use strict";angular.module("AngularBetterMessage").constant("ANGULAR_BETTER_MESSAGE_CLASS","message").constant("ANGULAR_BETTER_MESSAGE_PROMPT_CLASS","prompt").constant("ANGULAR_BETTER_MESSAGE_HAS_PROMPT_CLASS","has-prompt")}();
//# sourceMappingURL=data:application/json;base64,
