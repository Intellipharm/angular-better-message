!function(){"use strict";angular.module("AngularBetterMessage",[])}(),angular.module("AngularBetterMessage",[]).run(["$templateCache",function(e){e.put("html/angular-better-message.html",'<div class="angular-better-message" ng-class="[state, outer_prompt_class]" ng-show="is_visible"><div ng-class="message_class"><span ng-class="message_icon_class"></span> <span class="angular-better-message-wrapper"></span> <span class="countdown" ng-if="show_count_down">{{count_down}}</span></div><div ng-if="prompt" ng-class="prompt_class"><button ng-class="prompt_button_class" ng-click="ctrl.onClick()">{{prompt}} <span ng-class="prompt_icon_class"></span></button></div></div>')}]),function(){"use strict";var e=function(e){this.onClick=function(){if(!_.isUndefined(e.onClick)){var n=_.isUndefined(e.message)?null:e.message,s=_.isUndefined(e.state)?null:e.state,t=_.isUndefined(e.key)?null:e.key,a=_.isUndefined(e.data)?null:e.data;e.onClick({message:n,state:s,key:t,data:a})}e.close()}};e.$inject=["$scope"],angular.module("AngularBetterMessage").controller("AngularBetterMessageCtrl",e)}(),function(){"use strict";var e=function(e,n,s,t,a,o){return{restrict:"EA",scope:{api:"=",message:"=",state:"=",key:"=",data:"=",message_icon_class:"=messageIconClass",prompt:"=",prompt_button_class:"=promptButtonClass",prompt_icon_class:"=promptIconClass",display_seconds:"=displaySeconds",show_count_down:"=showCountDown",fixed_position_on_scroll:"=fixedPositionOnScroll",onClick:"&onPromptClick"},controller:"AngularBetterMessageCtrl as ctrl",link:function(n,i,l,c){var r=n.api||{};n.message_class=t,n.prompt_class=a;var d,u,p;n.is_visible=!1;var f,g=angular.element(e);r.close=function(){n.close()},r.update=function(){n.update()},n.close=function(){n.is_visible=!1},n.wait=function(){d=window.setInterval(function(){0===--n.count_down?(window.clearInterval(d),n.close()):n.wait()},1e3)},n.checkPosition=function(){n.is_visible&&!i.hasClass("detached")&&_.isNull(i[0].offsetParent)?u=window.setInterval(n.checkPosition,100):(p=i[0].getBoundingClientRect().top,n.updateDetached())},n.updateDetached=function(){window.clearInterval(u),!i.hasClass("detached")&&0>=p&&e.pageYOffset>0?(f=e.pageYOffset,i.addClass("detached")):i.hasClass("detached")&&!_.isUndefined(f)&&e.pageYOffset<=f&&i.removeClass("detached")},n.update=function(){n.is_visible=!0,n.fixed_position_on_scroll&&n.checkPosition(),n.count_down=_.parseInt(n.display_seconds),window.clearInterval(d),_.isUndefined(n.count_down)||0===n.count_down||(n.wait(),n.outer_prompt_class=o)},n.$watch("display_seconds",function(e){_.isUndefined(e)||""===e||(n.display_seconds=_.parseInt(e),n.count_down=_.parseInt(e))}),n.$watch("message",function(e){var t=angular.element(i[0].querySelector(".angular-better-message-wrapper"));if(t.empty(),_.isUndefined(e)||""===e)window.clearInterval(d),n.close();else{var a=s("<span>"+e+"</span>")(n.$parent.$parent);t.append(a),n.update()}}),n.$watch("prompt",function(e){_.isUndefined(e)||""===e?n.outer_prompt_class="":n.outer_prompt_class=o}),n.fixed_position_on_scroll&&g.on("scroll",function(){_.isUndefined(n.message)||""===n.message||n.checkPosition()})},replace:!0,templateUrl:"html/angular-better-message.html"}};e.$inject=["$window","$timeout","$compile","ANGULAR_BETTER_MESSAGE_CLASS","ANGULAR_BETTER_MESSAGE_PROMPT_CLASS","ANGULAR_BETTER_MESSAGE_HAS_PROMPT_CLASS"],angular.module("AngularBetterMessage").directive("angularBetterMessage",e)}(),function(){"use strict";angular.module("AngularBetterMessage").constant("ANGULAR_BETTER_MESSAGE_CLASS","message").constant("ANGULAR_BETTER_MESSAGE_PROMPT_CLASS","prompt").constant("ANGULAR_BETTER_MESSAGE_HAS_PROMPT_CLASS","has-prompt")}();
//# sourceMappingURL=data:application/json;base64,
