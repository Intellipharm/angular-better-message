!function(){"use strict";angular.module("AngularBetterMessage",[])}(),function(){"use strict";var e=function(e){this.onClick=function(){if(!_.isUndefined(e.onClick)){var t=_.isUndefined(e.message)?null:e.message,s=_.isUndefined(e.state)?null:e.state,n=_.isUndefined(e.key)?null:e.key,a=_.isUndefined(e.data)?null:e.data;e.onClick({message:t,state:s,key:n,data:a})}e.close()}};e.$inject=["$scope"],angular.module("AngularBetterMessage").controller("AngularBetterMessageCtrl",e)}(),function(){"use strict";var e=function(e,t,s,n,a,o){return{restrict:"EA",scope:{api:"=",message:"=",state:"=",key:"=",data:"=",message_icon_class:"=messageIconClass",prompt:"=",prompt_button_class:"=promptButtonClass",prompt_icon_class:"=promptIconClass",display_seconds:"=displaySeconds",show_count_down:"=showCountDown",fixed_position_on_scroll:"=fixedPositionOnScroll",always_detach:"=alwaysDetach",onClick:"&onPromptClick"},controller:"AngularBetterMessageCtrl as ctrl",link:function(t,i,c,l){var r=t.api||{};t.message_class=n,t.prompt_class=a;var d,u,p;t.is_visible=!1;var f,m=angular.element(e);r.close=function(){t.close()},r.update=function(){t.update()},t.close=function(){t.is_visible=!1},t.wait=function(){d=window.setTimeout(function(){0===--t.count_down?(window.clearTimeout(d),t.close(),t.$apply()):(t.wait(),t.$apply())},1e3)},t.checkPosition=function(){t.is_visible&&!i.hasClass("detached")&&_.isNull(i[0].offsetParent)?u=window.setTimeout(function(){t.checkPosition(),t.$apply()},100):(p=i[0].getBoundingClientRect().top,t.updateDetached())},t.updateDetached=function(){window.clearTimeout(u),t.always_detach&&!i.hasClass("detached")&&0>=p&&e.pageYOffset>0?(f=e.pageYOffset,i.addClass("detached")):i.hasClass("detached")&&!_.isUndefined(f)&&e.pageYOffset<=f&&i.removeClass("detached")},t.update=function(){t.is_visible=!0,t.fixed_position_on_scroll&&t.checkPosition(),t.count_down=_.parseInt(t.display_seconds),window.clearTimeout(d),_.isUndefined(t.count_down)||0===t.count_down||(t.wait(),t.outer_prompt_class=o)},t.$watch("display_seconds",function(e){_.isUndefined(e)||""===e||(t.display_seconds=_.parseInt(e),t.count_down=_.parseInt(e))}),t.$watch("message",function(e){var n=angular.element(i[0].querySelector(".angular-better-message-wrapper"));if(n.empty(),_.isUndefined(e)||""===e)window.clearTimeout(d),t.close();else{var a=s("<span>"+e+"</span>")(t.$parent.$parent);n.append(a),t.update()}}),t.$watch("prompt",function(e){_.isUndefined(e)||""===e?t.outer_prompt_class="":t.outer_prompt_class=o}),t.fixed_position_on_scroll&&m.on("scroll",function(){_.isUndefined(t.message)||""===t.message||t.checkPosition()}),t.updateDetached()},replace:!0,templateUrl:"html/angular-better-message.html"}};e.$inject=["$window","$timeout","$compile","ANGULAR_BETTER_MESSAGE_CLASS","ANGULAR_BETTER_MESSAGE_PROMPT_CLASS","ANGULAR_BETTER_MESSAGE_HAS_PROMPT_CLASS"],angular.module("AngularBetterMessage").directive("angularBetterMessage",e)}(),function(){"use strict";angular.module("AngularBetterMessage").constant("ANGULAR_BETTER_MESSAGE_CLASS","message").constant("ANGULAR_BETTER_MESSAGE_PROMPT_CLASS","prompt").constant("ANGULAR_BETTER_MESSAGE_HAS_PROMPT_CLASS","has-prompt")}();
//# sourceMappingURL=data:application/json;base64,
