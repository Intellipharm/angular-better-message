!function(){"use strict";angular.module("AngularBetterMessage",[])}(),angular.module("AngularBetterMessage",[]).run(["$templateCache",function(e){e.put("html/angular-better-message.html",'<div class="angular-better-message" ng-class="[state, outer_prompt_class]" ng-show="is_visible"><div ng-class="message_class"><span ng-class="message_icon_class"></span> <span class="angular-better-message-wrapper"></span> <span class="countdown" ng-if="show_count_down">{{count_down}}</span></div><div ng-if="prompt" ng-class="prompt_class"><button ng-class="prompt_button_class" ng-click="ctrl.onClick()">{{prompt}} <span ng-class="prompt_icon_class"></span></button></div></div>')}]),function(){"use strict";var e=function(e){this.onClick=function(){if(!_.isUndefined(e.onClick)){var s=_.isUndefined(e.message)?null:e.message,n=_.isUndefined(e.state)?null:e.state,t=_.isUndefined(e.key)?null:e.key,a=_.isUndefined(e.data)?null:e.data;e.onClick({message:s,state:n,key:t,data:a})}e.close()}};e.$inject=["$scope"],angular.module("AngularBetterMessage").controller("AngularBetterMessageCtrl",e)}(),function(){"use strict";var e=function(e,s,n,t,a,o){return{restrict:"EA",scope:{api:"=",message:"=",state:"=",key:"=",data:"=",message_icon_class:"=messageIconClass",prompt:"=",prompt_button_class:"=promptButtonClass",prompt_icon_class:"=promptIconClass",display_seconds:"=displaySeconds",show_count_down:"=showCountDown",fixed_position_on_scroll:"=fixedPositionOnScroll",onClick:"&onPromptClick"},controller:"AngularBetterMessageCtrl as ctrl",link:function(c,i,l,r){var p=c.api||{};c.message_class=t,c.prompt_class=a;var u,d,g;c.is_visible=!1;var m,f=angular.element(e);p.close=function(){c.close()},p.update=function(){c.update()},c.close=function(){c.is_visible=!1},c.wait=function(){u=s(function(){0===--c.count_down?(s.cancel(u),c.close()):c.wait()},1e3)},c.checkPosition=function(){c.is_visible&&!i.hasClass("detached")&&_.isNull(i[0].offsetParent)?d=s(c.checkPosition,100):(g=i[0].getBoundingClientRect().top,c.updateDetached())},c.updateDetached=function(){s.cancel(d),!i.hasClass("detached")&&0>=g&&e.pageYOffset>0?(m=e.pageYOffset,i.addClass("detached")):i.hasClass("detached")&&!_.isUndefined(m)&&e.pageYOffset<=m&&i.removeClass("detached")},c.update=function(){c.is_visible=!0,c.fixed_position_on_scroll&&c.checkPosition(),c.count_down=_.parseInt(c.display_seconds),s.cancel(u),_.isUndefined(c.count_down)||0===c.count_down||(c.wait(),c.outer_prompt_class=o)},c.$watch("display_seconds",function(e){_.isUndefined(e)||""===e||(c.display_seconds=_.parseInt(e),c.count_down=_.parseInt(e))}),c.$watch("message",function(e){var t=angular.element(i[0].querySelector(".angular-better-message-wrapper"));if(t.empty(),_.isUndefined(e)||""===e)s.cancel(u),c.close();else{var a=n("<span>"+e+"</span>")(c.$parent.$parent);t.append(a),c.update()}}),c.$watch("prompt",function(e){_.isUndefined(e)||""===e?c.outer_prompt_class="":c.outer_prompt_class=o}),c.fixed_position_on_scroll&&f.on("scroll",function(){_.isUndefined(c.message)||""===c.message||c.checkPosition()})},replace:!0,templateUrl:"html/angular-better-message.html"}};e.$inject=["$window","$timeout","$compile","ANGULAR_BETTER_MESSAGE_CLASS","ANGULAR_BETTER_MESSAGE_PROMPT_CLASS","ANGULAR_BETTER_MESSAGE_HAS_PROMPT_CLASS"],angular.module("AngularBetterMessage").directive("angularBetterMessage",e)}(),function(){"use strict";angular.module("AngularBetterMessage").constant("ANGULAR_BETTER_MESSAGE_CLASS","message").constant("ANGULAR_BETTER_MESSAGE_PROMPT_CLASS","prompt").constant("ANGULAR_BETTER_MESSAGE_HAS_PROMPT_CLASS","has-prompt")}();
//# sourceMappingURL=data:application/json;base64,
