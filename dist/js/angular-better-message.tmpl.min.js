!function(){"use strict";angular.module("AngularBetterMessage",[])}(),angular.module("AngularBetterMessage",[]).run(["$templateCache",function(e){e.put("html/angular-better-message.html",'<div class="angular-better-message" ng-class="[state, outer_prompt_class]" ng-show="is_visible"><div ng-class="message_class"><span ng-class="message_icon_class"></span> <span class="angular-better-message-wrapper"></span> <span class="countdown" ng-if="show_count_down">{{count_down}}</span></div><div ng-if="prompt" ng-class="prompt_class"><button ng-class="prompt_button_class" ng-click="ctrl.onClick()">{{prompt}} <span ng-class="prompt_icon_class"></span></button></div></div>')}]),function(){"use strict";var e=function(e){this.onClick=function(){if(!_.isUndefined(e.onClick)){var s=_.isUndefined(e.message)?null:e.message,n=_.isUndefined(e.state)?null:e.state,t=_.isUndefined(e.key)?null:e.key,a=_.isUndefined(e.data)?null:e.data;e.onClick({message:s,state:n,key:t,data:a})}e.close()}};e.$inject=["$scope"],angular.module("AngularBetterMessage").controller("AngularBetterMessageCtrl",e)}(),function(){"use strict";var e=function(e,s,n,t,a,o){return{restrict:"EA",scope:{api:"=",message:"=",state:"=",key:"=",data:"=",message_icon_class:"=messageIconClass",prompt:"=",prompt_button_class:"=promptButtonClass",prompt_icon_class:"=promptIconClass",display_seconds:"=displaySeconds",show_count_down:"=showCountDown",fixed_position_on_scroll:"=fixedPositionOnScroll",onClick:"&onPromptClick"},controller:"AngularBetterMessageCtrl as ctrl",link:function(s,i,l,c){var r=s.api||{};s.message_class=t,s.prompt_class=a;var u,p,d;s.is_visible=!1;var g,m=angular.element(e);r.close=function(){s.close()},r.update=function(){s.update()},s.close=function(){s.is_visible=!1},s.wait=function(){u=window.setTimeout(function(){0===--s.count_down?(window.clearTimeout(u),s.close(),s.$apply()):(s.wait(),s.$apply())},1e3)},s.checkPosition=function(){s.is_visible&&!i.hasClass("detached")&&_.isNull(i[0].offsetParent)?p=window.setTimeout(function(){s.checkPosition(),s.$apply()},100):(d=i[0].getBoundingClientRect().top,s.updateDetached())},s.updateDetached=function(){window.clearTimeout(p),!i.hasClass("detached")&&0>=d&&e.pageYOffset>0?(g=e.pageYOffset,i.addClass("detached")):i.hasClass("detached")&&!_.isUndefined(g)&&e.pageYOffset<=g&&i.removeClass("detached")},s.update=function(){s.is_visible=!0,s.fixed_position_on_scroll&&s.checkPosition(),s.count_down=_.parseInt(s.display_seconds),window.clearTimeout(u),_.isUndefined(s.count_down)||0===s.count_down||(s.wait(),s.outer_prompt_class=o)},s.$watch("display_seconds",function(e){_.isUndefined(e)||""===e||(s.display_seconds=_.parseInt(e),s.count_down=_.parseInt(e))}),s.$watch("message",function(e){var t=angular.element(i[0].querySelector(".angular-better-message-wrapper"));if(t.empty(),_.isUndefined(e)||""===e)window.clearTimeout(u),s.close();else{var a=n("<span>"+e+"</span>")(s.$parent.$parent);t.append(a),s.update()}}),s.$watch("prompt",function(e){_.isUndefined(e)||""===e?s.outer_prompt_class="":s.outer_prompt_class=o}),s.fixed_position_on_scroll&&m.on("scroll",function(){_.isUndefined(s.message)||""===s.message||s.checkPosition()})},replace:!0,templateUrl:"html/angular-better-message.html"}};e.$inject=["$window","$timeout","$compile","ANGULAR_BETTER_MESSAGE_CLASS","ANGULAR_BETTER_MESSAGE_PROMPT_CLASS","ANGULAR_BETTER_MESSAGE_HAS_PROMPT_CLASS"],angular.module("AngularBetterMessage").directive("angularBetterMessage",e)}(),function(){"use strict";angular.module("AngularBetterMessage").constant("ANGULAR_BETTER_MESSAGE_CLASS","message").constant("ANGULAR_BETTER_MESSAGE_PROMPT_CLASS","prompt").constant("ANGULAR_BETTER_MESSAGE_HAS_PROMPT_CLASS","has-prompt")}();
//# sourceMappingURL=data:application/json;base64,
