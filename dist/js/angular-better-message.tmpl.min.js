!function(){"use strict";angular.module("AngularBetterMessage",[])}(),angular.module("AngularBetterMessage",[]).run(["$templateCache",function(s){s.put("html/angular-better-message.html",'<div class="angular-better-message" ng-class="[state, outer_prompt_class]" ng-show="is_visible"><div ng-class="message_class"><span ng-class="message_icon_class"></span> {{message}}&nbsp; <span class="countdown" ng-if="show_count_down">{{count_down}}</span></div><div ng-if="prompt" ng-class="prompt_class"><button ng-class="prompt_button_class" ng-click="ctrl.onClick()">{{prompt}}<span ng-class="prompt_icon_class"></span></button></div></div>')}]),function(){"use strict";var s=function(s){this.onClick=function(){if(!_.isUndefined(s.onClick)){var e=_.isUndefined(s.message)?null:s.message,n=_.isUndefined(s.state)?null:s.state,t=_.isUndefined(s.data)?null:s.data;s.onClick({message:e,state:n,data:t})}s.close()}};s.$inject=["$scope"],angular.module("AngularBetterMessage").controller("AngularBetterMessageCtrl",s)}(),function(){"use strict";var s=function(s,e,n,t,a){return{restrict:"EA",scope:{api:"=",state:"=",data:"=",message:"=",message_icon_class:"=messageIconClass",prompt:"=",prompt_button_class:"=promptButtonClass",prompt_icon_class:"=promptIconClass",display_seconds:"=displaySeconds",show_count_down:"=showCountDown",fixed_position_on_scroll:"=fixedPositionOnScroll",onClick:"&onPromptClick"},controller:"AngularBetterMessageCtrl as ctrl",link:function(o,c,i,l){var r=o.api||{};o.message_class=n,o.prompt_class=t;var d,u,p;o.is_visible=!1;var g,m=angular.element(s);r.close=function(){o.close()},o.close=function(){o.is_visible=!1},o.wait=function(){d=e(function(){0===--o.count_down?(e.cancel(d),o.close()):o.wait()},1e3)},o.checkPosition=function(){o.is_visible&&!c.hasClass("detached")&&_.isNull(c[0].offsetParent)?u=e(o.checkPosition,100):(p=c[0].getBoundingClientRect().top,o.updateDetached())},o.updateDetached=function(){e.cancel(u),!c.hasClass("detached")&&0>=p&&s.pageYOffset>0?(g=s.pageYOffset,c.addClass("detached")):c.hasClass("detached")&&!_.isUndefined(g)&&s.pageYOffset<=g&&c.removeClass("detached")},o.update=function(){o.is_visible=!0,o.fixed_position_on_scroll&&o.checkPosition(),o.count_down=_.parseInt(o.display_seconds),e.cancel(d),_.isUndefined(o.count_down)||0===o.count_down||(o.wait(),o.outer_prompt_class=a)},o.$watch("display_seconds",function(s){_.isUndefined(s)||""===s||(o.display_seconds=_.parseInt(s),o.count_down=_.parseInt(s))}),o.$watch("message",function(s){_.isUndefined(s)||""===s?(e.cancel(d),o.close()):o.update()}),o.$watch("prompt",function(s){o.outer_prompt_class=_.isUndefined(s)||""===s?"":a}),o.fixed_position_on_scroll&&m.on("scroll",function(){_.isUndefined(o.message)||""===o.message||o.checkPosition()})},replace:!0,templateUrl:"html/angular-better-message.html"}};s.$inject=["$window","$timeout","ANGULAR_BETTER_MESSAGE_CLASS","ANGULAR_BETTER_MESSAGE_PROMPT_CLASS","ANGULAR_BETTER_MESSAGE_HAS_PROMPT_CLASS"],angular.module("AngularBetterMessage").directive("angularBetterMessage",s)}(),function(){"use strict";angular.module("AngularBetterMessage").constant("ANGULAR_BETTER_MESSAGE_CLASS","message").constant("ANGULAR_BETTER_MESSAGE_PROMPT_CLASS","prompt").constant("ANGULAR_BETTER_MESSAGE_HAS_PROMPT_CLASS","has-prompt")}();
//# sourceMappingURL=data:application/json;base64,