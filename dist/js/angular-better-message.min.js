!function(){"use strict";angular.module("AngularBetterMessage",[])}(),function(){"use strict";var e=function(e){this.onClick=function(){if(!_.isUndefined(e.onClick)){var s=_.isUndefined(e.message)?null:e.message,n=_.isUndefined(e.state)?null:e.state,t=_.isUndefined(e.key)?null:e.key;e.onClick({message:s,state:n,key:t})}e.close()}};e.$inject=["$scope"],angular.module("AngularBetterMessage").controller("AngularBetterMessageCtrl",e)}(),function(){"use strict";var e=function(e,s,n,t,o){return{restrict:"EA",scope:{api:"=",message:"=",state:"=",key:"=",message_icon_class:"=messageIconClass",prompt:"=",prompt_button_class:"=promptButtonClass",prompt_icon_class:"=promptIconClass",display_seconds:"=displaySeconds",show_count_down:"=showCountDown",fixed_position_on_scroll:"=fixedPositionOnScroll",onClick:"&onPromptClick"},controller:"AngularBetterMessageCtrl as ctrl",link:function(a,i,c,l){var r=a.api||{};a.message_class=n,a.prompt_class=t;var d,u,p;a.is_visible=!1;var f,g=angular.element(e);r.close=function(){a.close()},r.update=function(){a.update()},a.close=function(){a.is_visible=!1},a.wait=function(){d=s(function(){0===--a.count_down?(s.cancel(d),a.close()):a.wait()},1e3)},a.checkPosition=function(){a.is_visible&&!i.hasClass("detached")&&_.isNull(i[0].offsetParent)?u=s(a.checkPosition,100):(p=i[0].getBoundingClientRect().top,a.updateDetached())},a.updateDetached=function(){s.cancel(u),!i.hasClass("detached")&&0>=p&&e.pageYOffset>0?(f=e.pageYOffset,i.addClass("detached")):i.hasClass("detached")&&!_.isUndefined(f)&&e.pageYOffset<=f&&i.removeClass("detached")},a.update=function(){a.is_visible=!0,a.fixed_position_on_scroll&&a.checkPosition(),a.count_down=_.parseInt(a.display_seconds),s.cancel(d),_.isUndefined(a.count_down)||0===a.count_down||(a.wait(),a.outer_prompt_class=o)},a.$watch("display_seconds",function(e){_.isUndefined(e)||""===e||(a.display_seconds=_.parseInt(e),a.count_down=_.parseInt(e))}),a.$watch("message",function(e){_.isUndefined(e)||""===e?(s.cancel(d),a.close()):a.update()}),a.$watch("prompt",function(e){a.outer_prompt_class=_.isUndefined(e)||""===e?"":o}),a.fixed_position_on_scroll&&g.on("scroll",function(){_.isUndefined(a.message)||""===a.message||a.checkPosition()})},replace:!0,templateUrl:"html/angular-better-message.html"}};e.$inject=["$window","$timeout","ANGULAR_BETTER_MESSAGE_CLASS","ANGULAR_BETTER_MESSAGE_PROMPT_CLASS","ANGULAR_BETTER_MESSAGE_HAS_PROMPT_CLASS"],angular.module("AngularBetterMessage").directive("angularBetterMessage",e)}(),function(){"use strict";angular.module("AngularBetterMessage").constant("ANGULAR_BETTER_MESSAGE_CLASS","message").constant("ANGULAR_BETTER_MESSAGE_PROMPT_CLASS","prompt").constant("ANGULAR_BETTER_MESSAGE_HAS_PROMPT_CLASS","has-prompt")}();
//# sourceMappingURL=data:application/json;base64,