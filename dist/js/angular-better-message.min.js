!function(){"use strict";angular.module("AngularBetterMessage",[])}(),function(){"use strict";var e=function(e){this.onClick=function(){if(!_.isUndefined(e.onClick)){var s=_.isUndefined(e.message)?null:e.message,n=_.isUndefined(e.state)?null:e.state,t=_.isUndefined(e.key)?null:e.key,a=_.isUndefined(e.data)?null:e.data;e.onClick({message:s,state:n,key:t,data:a})}e.close()}};e.$inject=["$scope"],angular.module("AngularBetterMessage").controller("AngularBetterMessageCtrl",e)}(),function(){"use strict";var e=function(e,s,n,t,a,o){return{restrict:"EA",scope:{api:"=",message:"=",state:"=",key:"=",data:"=",message_icon_class:"=messageIconClass",prompt:"=",prompt_button_class:"=promptButtonClass",prompt_icon_class:"=promptIconClass",display_seconds:"=displaySeconds",show_count_down:"=showCountDown",fixed_position_on_scroll:"=fixedPositionOnScroll",onClick:"&onPromptClick"},controller:"AngularBetterMessageCtrl as ctrl",link:function(i,c,l,r){var d=i.api||{};i.message_class=t,i.prompt_class=a;var u,p,f;i.is_visible=!1;var g,m=angular.element(e);d.close=function(){i.close()},d.update=function(){i.update()},i.close=function(){i.is_visible=!1},i.wait=function(){u=s(function(){0===--i.count_down?(s.cancel(u),i.close()):i.wait()},1e3)},i.checkPosition=function(){i.is_visible&&!c.hasClass("detached")&&_.isNull(c[0].offsetParent)?p=s(i.checkPosition,100):(f=c[0].getBoundingClientRect().top,i.updateDetached())},i.updateDetached=function(){s.cancel(p),!c.hasClass("detached")&&0>=f&&e.pageYOffset>0?(g=e.pageYOffset,c.addClass("detached")):c.hasClass("detached")&&!_.isUndefined(g)&&e.pageYOffset<=g&&c.removeClass("detached")},i.update=function(){i.is_visible=!0,i.fixed_position_on_scroll&&i.checkPosition(),i.count_down=_.parseInt(i.display_seconds),s.cancel(u),_.isUndefined(i.count_down)||0===i.count_down||(i.wait(),i.outer_prompt_class=o)},i.$watch("display_seconds",function(e){_.isUndefined(e)||""===e||(i.display_seconds=_.parseInt(e),i.count_down=_.parseInt(e))}),i.$watch("message",function(e){var t=angular.element(c[0].querySelector(".angular-better-message-wrapper"));if(t.empty(),_.isUndefined(e)||""===e)s.cancel(u),i.close();else{var a=n("<span>"+e+"</span>")(i.$parent.$parent);t.append(a),i.update()}}),i.$watch("prompt",function(e){_.isUndefined(e)||""===e?i.outer_prompt_class="":i.outer_prompt_class=o}),i.fixed_position_on_scroll&&m.on("scroll",function(){_.isUndefined(i.message)||""===i.message||i.checkPosition()})},replace:!0,templateUrl:"html/angular-better-message.html"}};e.$inject=["$window","$timeout","$compile","ANGULAR_BETTER_MESSAGE_CLASS","ANGULAR_BETTER_MESSAGE_PROMPT_CLASS","ANGULAR_BETTER_MESSAGE_HAS_PROMPT_CLASS"],angular.module("AngularBetterMessage").directive("angularBetterMessage",e)}(),function(){"use strict";angular.module("AngularBetterMessage").constant("ANGULAR_BETTER_MESSAGE_CLASS","message").constant("ANGULAR_BETTER_MESSAGE_PROMPT_CLASS","prompt").constant("ANGULAR_BETTER_MESSAGE_HAS_PROMPT_CLASS","has-prompt")}();
//# sourceMappingURL=data:application/json;base64,
