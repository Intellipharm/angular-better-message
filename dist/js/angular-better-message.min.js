!function(){"use strict";angular.module("AngularBetterMessage",[])}(),function(){"use strict";var e=function(e){this.onClick=function(){if(!_.isUndefined(e.onClick)){var s=_.isUndefined(e.message)?null:e.message,n=_.isUndefined(e.state)?null:e.state,t=_.isUndefined(e.data)?null:e.data;e.onClick({message:s,state:n,data:t})}e.close()}};e.$inject=["$scope"],angular.module("AngularBetterMessage").controller("AngularBetterMessageCtrl",e)}(),function(){"use strict";var e=function(e,s,n,t,a){return{restrict:"EA",scope:{api:"=",state:"=",data:"=",message:"=",message_icon_class:"=messageIconClass",prompt:"=",prompt_button_class:"=promptButtonClass",prompt_icon_class:"=promptIconClass",display_seconds:"=displaySeconds",show_count_down:"=showCountDown",fixed_position_on_scroll:"=fixedPositionOnScroll",onClick:"&onPromptClick"},controller:"AngularBetterMessageCtrl as ctrl",link:function(o,i,c,l){var d=o.api||{};o.message_class=n,o.prompt_class=t;var r,u,p;o.is_visible=!1;var f,g=angular.element(e);d.close=function(){o.close()},o.close=function(){o.is_visible=!1},o.wait=function(){r=s(function(){0===--o.count_down?(s.cancel(r),o.close()):o.wait()},1e3)},o.checkPosition=function(){o.is_visible&&!i.hasClass("detached")&&_.isNull(i[0].offsetParent)?u=s(o.checkPosition,100):(p=i[0].getBoundingClientRect().top,o.updateDetached())},o.updateDetached=function(){s.cancel(u),!i.hasClass("detached")&&0>=p&&e.pageYOffset>0?(f=e.pageYOffset,i.addClass("detached")):i.hasClass("detached")&&!_.isUndefined(f)&&e.pageYOffset<=f&&i.removeClass("detached")},o.update=function(){o.is_visible=!0,o.fixed_position_on_scroll&&o.checkPosition(),o.count_down=_.parseInt(o.display_seconds),s.cancel(r),_.isUndefined(o.count_down)||0===o.count_down||(o.wait(),o.outer_prompt_class=a)},o.$watch("display_seconds",function(e){_.isUndefined(e)||""===e||(o.display_seconds=_.parseInt(e),o.count_down=_.parseInt(e))}),o.$watch("message",function(e){_.isUndefined(e)||""===e?(s.cancel(r),o.close()):o.update()}),o.$watch("prompt",function(e){o.outer_prompt_class=_.isUndefined(e)||""===e?"":a}),o.fixed_position_on_scroll&&g.on("scroll",function(){_.isUndefined(o.message)||""===o.message||o.checkPosition()})},replace:!0,templateUrl:"html/angular-better-message.html"}};e.$inject=["$window","$timeout","ANGULAR_BETTER_MESSAGE_CLASS","ANGULAR_BETTER_MESSAGE_PROMPT_CLASS","ANGULAR_BETTER_MESSAGE_HAS_PROMPT_CLASS"],angular.module("AngularBetterMessage").directive("angularBetterMessage",e)}(),function(){"use strict";angular.module("AngularBetterMessage").constant("ANGULAR_BETTER_MESSAGE_CLASS","message").constant("ANGULAR_BETTER_MESSAGE_PROMPT_CLASS","prompt").constant("ANGULAR_BETTER_MESSAGE_HAS_PROMPT_CLASS","has-prompt")}();
//# sourceMappingURL=data:application/json;base64,